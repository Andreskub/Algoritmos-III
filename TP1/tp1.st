Object subclass: #AlgoVid	instanceVariableNames: 'personas burbujas colegios'	classVariableNames: ''	package: 'tp1'!!AlgoVid commentStamp: 'Andres 6/19/2021 19:33' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	burbujas:		<Object>	colegios:		<Object>	personas:		<Object>    Implementation Points!!AlgoVid methodsFor: 'initialization' stamp: 'Andres 5/15/2021 20:33'!initialize 	personas := OrderedCollection new.	burbujas := OrderedCollection new.	colegios := OrderedCollection new.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 5/17/2021 16:01'!diagnosticoDe: unNombrePersona 	^(self buscar: unNombrePersona en: personas) diagnosticoPersona.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 6/19/2021 15:27'!puedeCircular: unNombrePersona 	"Comprueba si una persona esta habilitada a circular y lo devuelve"	^(self buscar: unNombrePersona en: personas) puedeCircular.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 6/19/2021 14:39'!burbujaPinchada: unNombreBurbuja	^(self buscar: unNombreBurbuja en: burbujas) burbujaPinchada.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 5/18/2021 18:59'!contactoEstrechoEntre: unNombrePersona y: otroNombrePersona	| personaUno personaDos |	personaUno := (self buscar: unNombrePersona en: personas).	personaDos := (self buscar: otroNombrePersona en: personas).		personaUno agregarContactoEstrecho: personaDos.	personaDos agregarContactoEstrecho: personaUno.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 6/19/2021 14:38'!agregarA: unNombreBurbuja alColegio: unNombreColegio	 (self buscar: unNombreColegio en: colegios) agregarBurbuja: (self buscar: unNombreBurbuja en: burbujas).! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 6/19/2021 15:26'!nuevaPersona: unNombrePersona	| unaPersona |	unaPersona := Persona new.	unaPersona nombre: unNombrePersona.	(self existe: unNombrePersona en: personas).	personas add: unaPersona.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 6/19/2021 14:51'!clasesPresencialesEn: unNombreColegio	^(self buscar: unNombreColegio en: colegios) colegioEsPresencial.	! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 6/19/2021 14:38'!agregarA: unNombrePersona aLaBurbuja: unNombreBurbuja 	(self buscar: unNombreBurbuja en: burbujas) nuevaPersonaEnBurbuja: (self buscar: unNombrePersona en: personas). ! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 6/19/2021 14:38'!agregarSintoma: unNombreSintoma a: unNombrePersona	(self buscar: unNombrePersona en: personas) agregarSintoma: unNombreSintoma.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 5/17/2021 16:02'!esPersonaDeRiesgo: unNombrePersona 	(self buscar: unNombrePersona en: personas) esGrupoDeRiesgo. ! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 5/17/2021 16:02'!esPersonalEsencial: unNombrePersona 	(self buscar: unNombrePersona en: personas) esEsencial.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 6/19/2021 15:26'!nuevoColegio: unNombreColegio	| unColegio |	unColegio := Colegio new.	unColegio nombre: unNombreColegio. 	(self existe: unNombreColegio en: colegios).	colegios add: unColegio.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 5/20/2021 14:45'!estaVacunadx: unNombrePersona 	^((self buscar: unNombrePersona en: personas) vacunar)estaVacunadx.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 6/19/2021 15:26'!existe: unNombre en: unaColeccion 	"Busca si el objeto en la coleccion y si ya existe da error"	unaColeccion detect: [ :objeto | (objeto nombre) = unNombre ] ifFound: [ ObjetoYaExisteEnColeccionError new signal ].! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 6/19/2021 15:24'!buscar: unNombre en: unaColeccion	""	| objetoBuscado |		(unaColeccion isEmpty) ifTrue: [ ColeccionNoEncontradaError new signal ].   objetoBuscado := unaColeccion detect: [ :objeto | (objeto nombre) = unNombre ] ifNone: [ ObjetoBuscadoNoExisteError new signal ].   ^objetoBuscado.! !!AlgoVid methodsFor: 'as yet unclassified' stamp: 'Andres 6/19/2021 15:26'!nuevaBurbuja: unNombreBurbuja	| unaBurbuja |	unaBurbuja := Burbuja new.	unaBurbuja nombre: unNombreBurbuja.	(self existe: unNombreBurbuja en: burbujas).	burbujas add: unaBurbuja.! !Object subclass: #Burbuja	instanceVariableNames: 'personasBurbuja nombre saludBurbuja'	classVariableNames: ''	package: 'tp1'!!Burbuja commentStamp: 'Andres 6/19/2021 19:33' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	nombre:		<Object>	personasBurbuja:		<Object>	pinchada:		<Object>	saludBurbuja:		<Object>    Implementation Points!!Burbuja methodsFor: 'as yet unclassified' stamp: 'Andres 5/15/2021 20:30'!nuevaPersonaEnBurbuja: unaPersona	personasBurbuja add: unaPersona.! !!Burbuja methodsFor: 'as yet unclassified' stamp: 'Andres 6/19/2021 15:53'!burbujaPinchada	"Comprueba si alguna de las personas en la burbuja es positiva, de ser asi la burbuja es	pinchada"	personasBurbuja detect: [:persona | (persona diagnosticoEsPositivo)] ifFound: [saludBurbuja := BurbujaSiEstaPinchada new].		saludBurbuja diagnosticarPersonasBurbuja: personasBurbuja.	^saludBurbuja estaPinchada.! !!Burbuja methodsFor: 'initialization' stamp: 'Andres 5/15/2021 16:13'!initialize 	personasBurbuja := OrderedCollection new.	saludBurbuja := BurbujaNoEstaPinchada new.! !!Burbuja methodsFor: 'accessing' stamp: 'Andres 5/15/2021 00:13'!nombre: unNombreBurbuja 	nombre := unNombreBurbuja.! !!Burbuja methodsFor: 'accessing' stamp: 'Andres 5/15/2021 00:11'!nombre	^nombre.! !Object subclass: #BurbujaPinchada	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!BurbujaPinchada commentStamp: 'Andres 6/19/2021 19:34' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!BurbujaPinchada subclass: #BurbujaNoEstaPinchada	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!BurbujaNoEstaPinchada commentStamp: 'Andres 6/19/2021 19:34' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!BurbujaNoEstaPinchada methodsFor: 'as yet unclassified' stamp: 'Andres 5/16/2021 21:51'!diagnosticarPersonasBurbuja: personasBurbuja 	nil.! !!BurbujaNoEstaPinchada methodsFor: 'as yet unclassified' stamp: 'Andres 5/16/2021 21:51'!estaPinchada	^false.! !BurbujaPinchada subclass: #BurbujaSiEstaPinchada	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!BurbujaSiEstaPinchada commentStamp: 'Andres 6/19/2021 19:34' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!BurbujaSiEstaPinchada methodsFor: 'as yet unclassified' stamp: 'Andres 6/16/2021 23:36'!diagnosticarPersonasBurbuja: personasBurbuja 	personasBurbuja do: [:persona | persona setPositivo].! !!BurbujaSiEstaPinchada methodsFor: 'as yet unclassified' stamp: 'Andres 5/15/2021 15:59'!estaPinchada 	^true.! !Object subclass: #Colegio	instanceVariableNames: 'burbujas presencialidad nombre'	classVariableNames: ''	package: 'tp1'!!Colegio commentStamp: 'Andres 6/19/2021 19:32' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	burbujas:		<Object>	burbujasColegio:		<Object>	nombre:		<Object>	presencialidad:		<Object>    Implementation Points!!Colegio methodsFor: 'accessing' stamp: 'Andres 5/17/2021 16:22'!nombre: unNombreColegio	nombre := unNombreColegio.! !!Colegio methodsFor: 'accessing' stamp: 'Andres 5/17/2021 16:11'!nombre	^nombre.! !!Colegio methodsFor: 'initialization' stamp: 'Andres 5/15/2021 20:51'!initialize 	burbujas := OrderedCollection new.	presencialidad := ClasesSiPresenciales new.! !!Colegio methodsFor: 'as yet unclassified' stamp: 'Andres 5/20/2021 16:29'!colegioEsPresencial	presencialidad actualizarPresencialidad: self.	^presencialidad esPresencial.! !!Colegio methodsFor: 'as yet unclassified' stamp: 'Andres 5/20/2021 16:26'!colegioNoEsPresencial	presencialidad := ClasesNoPresenciales new.! !!Colegio methodsFor: 'as yet unclassified' stamp: 'Andres 5/21/2021 14:14'!agregarBurbuja: unaBurbuja	burbujas add: unaBurbuja. ! !!Colegio methodsFor: 'as yet unclassified' stamp: 'Andres 5/20/2021 16:24'!devolverBurbujas	^burbujas.! !Object subclass: #DiagnosticoPersonaPositivo	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!DiagnosticoPersonaPositivo commentStamp: 'Andres 6/19/2021 19:34' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!DiagnosticoPersonaPositivo methodsFor: 'as yet unclassified' stamp: 'Andres 5/18/2021 22:42'!actualizarDiagnostico: sintomas conSalud: salud	^nil.! !!DiagnosticoPersonaPositivo methodsFor: 'as yet unclassified' stamp: 'Andres 5/18/2021 22:12'!diagnostico	^'Positivo'.! !Object subclass: #DiagnosticoPersonaSaludable	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!DiagnosticoPersonaSaludable commentStamp: 'Andres 6/19/2021 19:34' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!DiagnosticoPersonaSaludable methodsFor: 'as yet unclassified' stamp: 'Andres 5/18/2021 22:40'!actualizarDiagnostico: sintomas conSalud: salud	(sintomas size ~= 0) ifTrue: [ salud actualizarDiagnosticoSospechoso ].! !!DiagnosticoPersonaSaludable methodsFor: 'as yet unclassified' stamp: 'Andres 5/18/2021 22:12'!diagnostico	^'Saludable'.! !Object subclass: #DiagnosticoPersonaSospechosa	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!DiagnosticoPersonaSospechosa commentStamp: 'Andres 6/19/2021 19:34' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!DiagnosticoPersonaSospechosa methodsFor: 'as yet unclassified' stamp: 'Andres 5/18/2021 22:44'!actualizarDiagnostico: sintomas conSalud: salud	(sintomas size = 3) ifTrue: [         sintomas detect: [ :x| (x sintomaHabitual)] ifFound: [ salud actualizarDiagnosticoPositivo ]].   ((sintomas size >= 4)) ifTrue: [ salud actualizarDiagnosticoPositivo].! !!DiagnosticoPersonaSospechosa methodsFor: 'as yet unclassified' stamp: 'Andres 5/20/2021 14:50'!diagnostico	^'Sospechoso'.! !Object subclass: #Esencial	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!Esencial commentStamp: 'Andres 6/19/2021 19:34' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!Object subclass: #Persona	instanceVariableNames: 'nombre vacunado salud esencial contactoEstrecho grupoDeRiesgo'	classVariableNames: ''	package: 'tp1'!!Persona commentStamp: 'Andres 6/19/2021 19:32' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	contactoEstrecho:		<Object>	esencial:		<Object>	grupoDeRiesgo:		<Object>	nombre:		<Object>	salud:		<Object>	vacunado:		<Object>    Implementation Points!!Persona methodsFor: 'accessing' stamp: 'Andres 5/15/2021 00:12'!nombre: unNombrePersona 	nombre := unNombrePersona .! !!Persona methodsFor: 'accessing' stamp: 'Andres 5/11/2021 18:20'!nombre 	^nombre.! !!Persona methodsFor: 'accessing' stamp: 'Andres 6/16/2021 23:40'!esGrupoDeRiesgo	grupoDeRiesgo := PersonaSiEsDeRiesgo new.! !!Persona methodsFor: 'accessing' stamp: 'Andres 6/17/2021 23:33'!vacunar	vacunado := PersonaSiEstaVacunada new.! !!Persona methodsFor: 'initialization' stamp: 'Andres 6/16/2021 23:35'!setPositivo	salud setSaludPositivo.! !!Persona methodsFor: 'initialization' stamp: 'Andres 6/19/2021 11:37'!initialize	salud := SaludPersona new.	vacunado := PersonaNoEstaVacunada new.	esencial := PersonaNoEsencial new.	contactoEstrecho := OrderedCollection new.	grupoDeRiesgo := PersonaNoEsDeRiesgo new.! !!Persona methodsFor: 'as yet unclassified' stamp: 'Andres 5/11/2021 21:00'!estaVacunadx	^vacunado estaVacunadx.	! !!Persona methodsFor: 'as yet unclassified' stamp: 'Andres 6/16/2021 23:40'!agregarSintoma: unNombreSintoma 	salud nuevoSintoma: unNombreSintoma.! !!Persona methodsFor: 'as yet unclassified' stamp: 'Andres 6/17/2021 23:40'!agregarContactoEstrecho: unaPersona 	contactoEstrecho add: unaPersona.	(unaPersona diagnosticoEsSaludable) ifFalse: [ salud actualizarDiagnosticoSospechoso ].	! !!Persona methodsFor: 'as yet unclassified' stamp: 'Andres 6/17/2021 23:39'!diagnosticoEsPositivo 	^salud diagnosticoEsPositivo.! !!Persona methodsFor: 'as yet unclassified' stamp: 'Andres 5/13/2021 22:48'!diagnosticoPersona	^salud diagnosticoPersona.! !!Persona methodsFor: 'as yet unclassified' stamp: 'Andres 6/16/2021 23:40'!esEsencial	esencial := PersonaSiEsencial new.! !!Persona methodsFor: 'as yet unclassified' stamp: 'Andres 6/17/2021 23:40'!diagnosticoEsSaludable	^salud diagnosticoEsSaludable.! !!Persona methodsFor: 'as yet unclassified' stamp: 'Andres 6/17/2021 23:40'!puedeCircular 	| circulax |	circulax := false.		((self estaVacunadx) | (esencial esEsencial) ) ifTrue: [ circulax := true ].	(grupoDeRiesgo esRiesgo) ifTrue: [ circulax := false ].	(self diagnosticoEsSaludable) ifFalse: [ circulax := false ].		^circulax.! !Esencial subclass: #PersonaNoEsencial	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!PersonaNoEsencial commentStamp: 'Andres 6/19/2021 19:34' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PersonaNoEsencial methodsFor: 'as yet unclassified' stamp: 'Andres 5/13/2021 23:09'!esEsencial 	^false.! !Esencial subclass: #PersonaSiEsencial	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!PersonaSiEsencial commentStamp: 'Andres 6/19/2021 19:35' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PersonaSiEsencial methodsFor: 'as yet unclassified' stamp: 'Andres 5/13/2021 23:09'!esEsencial 	^true.! !Object subclass: #Prescencialidad	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!Prescencialidad commentStamp: 'Andres 6/19/2021 19:35' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!Prescencialidad subclass: #ClasesNoPresenciales	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!ClasesNoPresenciales commentStamp: 'Andres 6/19/2021 19:35' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!ClasesNoPresenciales methodsFor: 'as yet unclassified' stamp: 'Andres 5/15/2021 20:50'!esPresencial	^false.! !!ClasesNoPresenciales methodsFor: 'as yet unclassified' stamp: 'Andres 5/20/2021 16:28'!actualizarPresencialidad: unColegio	^nil.! !Prescencialidad subclass: #ClasesSiPresenciales	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!ClasesSiPresenciales commentStamp: 'Andres 6/19/2021 19:35' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!ClasesSiPresenciales methodsFor: 'as yet unclassified' stamp: 'Andres 5/15/2021 20:50'!esPresencial 	^true.! !!ClasesSiPresenciales methodsFor: 'as yet unclassified' stamp: 'Andres 6/19/2021 15:21'!actualizarPresencialidad: unColegio	"Busca las burbujas correspondientes al colegio y si mas del 40% estan pinchadas, 	entonces las clases del colegio dejan de ser presenciales"	| burbujas |	burbujas := unColegio devolverBurbujas.	(burbujas isEmpty) ifTrue: [ ColeccionEstaVacia new signal ].   (((burbujas count: [:x|x burbujaPinchada ])/burbujas size) > 0.4) ifTrue: [unColegio colegioNoEsPresencial].! !Object subclass: #Riesgo	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!Riesgo commentStamp: 'Andres 6/19/2021 19:35' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!Riesgo subclass: #PersonaNoEsDeRiesgo	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!PersonaNoEsDeRiesgo commentStamp: 'Andres 6/19/2021 19:35' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PersonaNoEsDeRiesgo methodsFor: 'as yet unclassified' stamp: 'Andres 5/13/2021 23:42'!esRiesgo	^false.! !Riesgo subclass: #PersonaSiEsDeRiesgo	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!PersonaSiEsDeRiesgo commentStamp: 'Andres 6/19/2021 19:35' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PersonaSiEsDeRiesgo methodsFor: 'as yet unclassified' stamp: 'Andres 5/13/2021 23:43'!esRiesgo	^true.! !Object subclass: #SaludPersona	instanceVariableNames: 'sintomas diagnostico'	classVariableNames: ''	package: 'tp1'!!SaludPersona commentStamp: 'Andres 6/19/2021 19:35' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	diagnostico:		<Object>	sintomas:		<Object>    Implementation Points!!SaludPersona methodsFor: 'as yet unclassified' stamp: 'Andres 5/18/2021 22:38'!actualizarDiagnosticoPositivo	diagnostico := DiagnosticoPersonaPositivo new.! !!SaludPersona methodsFor: 'as yet unclassified' stamp: 'Andres 6/17/2021 23:39'!diagnosticoEsPositivo	^(self diagnosticoPersona = 'Positivo').! !!SaludPersona methodsFor: 'as yet unclassified' stamp: 'Andres 5/18/2021 22:48'!diagnosticoPersona 	^diagnostico diagnostico.! !!SaludPersona methodsFor: 'as yet unclassified' stamp: 'Andres 5/18/2021 22:38'!actualizarDiagnosticoSospechoso	diagnostico := DiagnosticoPersonaSospechosa new.! !!SaludPersona methodsFor: 'as yet unclassified' stamp: 'Andres 5/20/2021 00:21'!nuevoSintoma: unNuevoSintoma	| unSintoma |	unSintoma := Sintoma new.	unSintoma nombreSintoma: unNuevoSintoma .	sintomas add: unSintoma .	diagnostico actualizarDiagnostico: sintomas conSalud: self.! !!SaludPersona methodsFor: 'as yet unclassified' stamp: 'Andres 6/17/2021 23:40'!diagnosticoEsSaludable	^(self diagnosticoPersona = 'Saludable').! !!SaludPersona methodsFor: 'initialization' stamp: 'Andres 5/18/2021 22:33'!initialize 	sintomas := OrderedCollection new.	diagnostico := DiagnosticoPersonaSaludable new.! !!SaludPersona methodsFor: 'initialization' stamp: 'Andres 6/16/2021 23:35'!setSaludPositivo	diagnostico := DiagnosticoPersonaPositivo.! !Object subclass: #Sintoma	instanceVariableNames: 'nombreSintoma sintomasHabituales'	classVariableNames: ''	package: 'tp1'!!Sintoma commentStamp: 'Andres 6/19/2021 19:35' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	nombreSintoma:		<Object>	sintomasHabituales:		<Object>    Implementation Points!!Sintoma methodsFor: 'accessing' stamp: 'Andres 5/13/2021 20:50'!nombreSintoma	^nombreSintoma.! !!Sintoma methodsFor: 'accessing' stamp: 'Andres 5/13/2021 20:49'!nombreSintoma: unNombreSintoma	nombreSintoma := unNombreSintoma. ! !!Sintoma methodsFor: 'as yet unclassified' stamp: 'Andres 5/13/2021 22:59'!sintomaHabitual	^ sintomasHabituales includes: (self nombreSintoma). ! !!Sintoma methodsFor: 'initialization' stamp: 'Andres 5/14/2021 00:35'!initialize 	sintomasHabituales := OrderedCollection new.	sintomasHabituales add: 'Fiebre'; add: 'Tos'; add: 'Cansancio'.! !Object subclass: #Vacunada	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!Vacunada commentStamp: 'Andres 6/19/2021 19:35' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!Vacunada subclass: #PersonaNoEstaVacunada	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!PersonaNoEstaVacunada commentStamp: 'Andres 6/19/2021 19:35' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PersonaNoEstaVacunada methodsFor: 'as yet unclassified' stamp: 'Andres 5/11/2021 21:01'!estaVacunadx 	^false.! !Vacunada subclass: #PersonaSiEstaVacunada	instanceVariableNames: ''	classVariableNames: ''	package: 'tp1'!!PersonaSiEstaVacunada commentStamp: 'Andres 6/19/2021 19:35' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PersonaSiEstaVacunada methodsFor: 'as yet unclassified' stamp: 'Andres 5/11/2021 21:01'!estaVacunadx 	^true.! !